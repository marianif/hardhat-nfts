// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

/**
 * @notice when we mint and NFT we will trigger a chainlink VRF call to get us a random number
 * using that number we will get a random NFT
 * Users must pay ETH to mint an NFT
 * The owner of the contract can withdraw the ETH
 * NFT can be of type: Pug, Shiba Inu, St.Bernard
 * -The different dogs/nft will have different rarity:
 * -Pug has 10% probability to be minted, Shiba 30%, St. Bernard 60%.
 *
 * @dev we are using Chainlink VRF v2
 *
 */

error RandomIpfsNft__RangeOutOfBounds();
error RandomIpfsNft__notEnoughEth();
error RandomIpfsNft__TransferFailed();

contract RandomIpfsNft is ERC721URIStorage, VRFConsumerBaseV2, Ownable {
    /**
     * @dev VRF v2 Coordinator: A contract designed to interact with the VRF node. It emits an event when a request for randomness is made, and then verifies the random number and proof of how it was generated by the VRF Node.
     */

    // Type declaration ( State of something)
    enum Breed {
        PUG, // position 0
        SHIBA_INU, // 1
        ST_BERNARD // 2
    }
    address private immutable i_owner;
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    uint64 private immutable i_subscriptionId;
    bytes32 private immutable i_gasLane;
    uint32 private immutable i_callbackGasLimit;
    uint32 private constant NUM_WORDS = 1;
    uint16 private constant REQUEST_CONFIRMATIONS = 3;

    // VRF helpers
    mapping(uint256 => address) public s_requestToSender;

    // NFT variables
    uint256 private s_tokenCounter;
    uint256 private constant MIN_CHANCE_VALUE = 10;
    uint256 private constant MID_CHANCE_VALUE = 30;
    uint256 private constant MAX_CHANCE_VALUE = 60;
    string[3] private s_tokenUris;
    uint256 private s_mintFee;

    // Events
    event NftRequested(uint256 requestId, address requester);
    event NftMinted(Breed dogbreed, address minter);

    constructor(
        address vrfCoordinatorV2,
        uint64 subscriptionId,
        bytes32 gasLane,
        uint32 callbackGasLimit,
        string[3] memory tokenUris,
        uint256 mintFee,
        address owner
    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721("Random IPFS Nft", "RIN") {
        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);
        i_gasLane = gasLane;
        i_subscriptionId = subscriptionId;
        i_callbackGasLimit = callbackGasLimit;
        s_tokenCounter = 0;
        s_tokenUris = tokenUris;
        s_mintFee = mintFee;
        i_owner = owner;
    }

    // Custom Only Owner Modifier
    // modifier onlyOwner() {
    //     require(msg.sender == i_owner, "Only owner can change the mint fee");
    //     _;
    // }

    /**
     * @dev we could have declared our own onlyOwner identifier has you can see in the
     * comment above or use openzeppelin api
     */

    // Only the owner can withdraw funds
    function withdraw() public payable onlyOwner {
        uint256 amount = address(this).balance;
        (bool success, ) = payable(msg.sender).call{value: amount}("");
        if (!success) {
            revert RandomIpfsNft__TransferFailed();
        }
    }

    // Users must pay for requesting an NFT
    function requestNft() public payable returns (uint256 requestId) {
        if (msg.value < s_mintFee) {
            revert RandomIpfsNft__notEnoughEth();
        }
        requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane,
            i_subscriptionId,
            REQUEST_CONFIRMATIONS,
            i_callbackGasLimit,
            NUM_WORDS
        );
        s_requestToSender[requestId] = msg.sender;
        emit NftRequested(requestId, msg.sender);
    }

    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)
        internal
        override
    {
        address dogOwner = s_requestToSender[requestId];
        uint256 tokenId = s_tokenCounter;
        // randomly get dog breed
        uint256 randomNumber = randomWords[0] % MAX_CHANCE_VALUE;
        //getBreedFromRandomNumber()
        Breed dogBreed = getBreedFromRandomNumber(randomNumber);
        _safeMint(dogOwner, tokenId);
        s_tokenCounter += 1;

        /**
         * @dev we are using ERC721URIStorage to test extension
         * but we could also use the basic ERC721 setup and provide custom logic for
         * finding the right dog image (uri) based on the breed by simpling mapping from breed to uri
         * @dev note that _setTokenURI is not the cheaper solution
         */

        _setTokenURI(tokenId, s_tokenUris[uint256(dogBreed)]);
        emit NftMinted(dogBreed, dogOwner);
    }

    function getBreedFromRandomNumber(uint256 randomNumber)
        private
        pure
        returns (Breed)
    {
        uint256 cumulativeSum = 0;
        uint256[3] memory chanceArray = getChanceArray();
        for (uint256 i = 0; i < chanceArray.length; i++) {
            // Check the range of random number
            if (
                randomNumber >= cumulativeSum &&
                randomNumber < cumulativeSum + chanceArray[i]
            ) {
                return Breed(1);
            }
            cumulativeSum += chanceArray[i];
        }
        revert RandomIpfsNft__RangeOutOfBounds();
    }

    function changeMintFee(uint256 _newMintFee)
        public
        onlyOwner
        returns (uint256)
    {
        s_mintFee = _newMintFee;
        return s_mintFee;
    }

    function getChanceArray() public pure returns (uint256[3] memory) {
        return [MIN_CHANCE_VALUE, MID_CHANCE_VALUE, MAX_CHANCE_VALUE];
    }

    function getMintFee() public view returns (uint256) {
        return s_mintFee;
    }

    function getDogTokenUris(uint256 index)
        public
        view
        returns (string memory)
    {
        return s_tokenUris[index];
    }

    function getTokenCounter() public view returns (uint256) {
        return s_tokenCounter;
    }
}
